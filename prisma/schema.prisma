// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  // Fields --------------------------------------------------
  id        Int       @default(autoincrement()) @id
  name      String
  lastName  String?
  email     String    @unique
  password  String
  role      Role      @default(EMPLOYEE)
  createdAt DateTime  @default(now())
  updatedAt DateTime?

  // References ----------------------------------------------
  productsCreated       Product[]       @relation("createdBy")
  productsUpdated       Product[]       @relation("updatedBy")
  categoriesCreated     Category[]      @relation("createdBy")
  categoriesUpdated     Category[]      @relation("updatedBy")
  manufacturersCreated  Manufacturer[]  @relation("createdBy")
  manufacturersUpdated  Manufacturer[]  @relation("updatedBy")
  offersCreated         Offer[]         @relation("createdBy")
  offersUpdated         Offer[]         @relation("updatedBy")
  salesCreated          Sale[]          @relation("createdBy")
  salesUpdated          Sale[]          @relation("updatedBy")
}


enum Role {
  ADMIN
  EMPLOYEE
}


model Product {
  // Fields -------------------------------------------------------------------------------------------------------
  id              Int       @default(autoincrement()) @id
  categoryId      Int?
  manufacturerId  Int?
  createdByUserId Int
  updatedByUserId Int?
  name            String    @unique
  description     String?
  stock           Int       @default(0)
  minStock        Int       @default(0)
  price           Float     @default(0)
  imported        Boolean   @default(false)
  discontinued    Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime?

  // References ---------------------------------------------------------------------------------------------------
  category              Category?               @relation(fields: [categoryId], references: [id])
  manufacturer          Manufacturer?           @relation(fields: [manufacturerId], references: [id])
  createdByUser         User                    @relation("createdBy", fields: [createdByUserId], references: [id])
  updatedByUser         User?                   @relation("updatedBy", fields: [updatedByUserId], references: [id])
  booleanFields         BooleanProductField[]
  quantityFields        QuantityProductField[]
  fractionFields        FractionProductField[]
  stringFields          StringProductField[]
  offers                ProductsOnOffers[]
  sales                 SalesOnProducts[]
}


model Category {
  // Fields -----------------------------------------------------------------------------------------
  id                Int       @default(autoincrement()) @id
  parentCategoryId  Int?
  createdByUserId   Int
  updatedByUserId   Int?
  name              String    @unique
  createdAt         DateTime  @default(now())
  updatedAt         DateTime?

  // References -------------------------------------------------------------------------------------
  parentCategory  Category?   @relation("parent-child", fields: [parentCategoryId], references: [id])
  createdByUser   User        @relation("createdBy", fields: [createdByUserId], references: [id])
  updatedByUser   User?       @relation("updatedBy", fields: [updatedByUserId], references: [id])
  categoriesChild Category[]  @relation("parent-child")
  products        Product[]
}


model Manufacturer {
  // Fields ---------------------------------------------------------------------------------
  id              Int       @default(autoincrement()) @id
  createdByUserId Int
  updatedByUserId Int?
  name            String    @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime?

  // References -----------------------------------------------------------------------------
  createdByUser User      @relation("createdBy", fields: [createdByUserId], references: [id])
  updatedByUser User?     @relation("updatedBy", fields: [updatedByUserId], references: [id])
  products      Product[]
}


// TODO: actualizar las caracteristicas

model BooleanProductField {
  // Fields --------------------------------------------------------
  productId Int
  name      String
  value     Boolean

  // References ---------------------------------------------
  product   Product @relation(fields: [productId], references: [id])

  @@id([productId, name])
}


model QuantityProductField {
  // Fields ----------------------------------------------------------
  productId   Int
  name        String
  value       Float
  metricUnit  String

  // References -----------------------------------------------
  product     Product @relation(fields: [productId], references: [id])

  @@id([productId, name])
}


model FractionProductField {
  // Fields ----------------------------------------------------------------
  productId         Int
  name              String
  numeratorValue    Int
  denominatorValue  Int
  metricUnit        String

  // References -----------------------------------------------------
  product           Product @relation(fields: [productId], references: [id])

  @@id([productId, name])
}


model StringProductField {
  // Fields --------------------------------------------------------
  productId Int
  name      String
  value     String

  // References ---------------------------------------------
  product   Product @relation(fields: [productId], references: [id])

  @@id([productId, name])
}


model Offer {
  // Fields -------------------------------------------------------------------------------------------
  id              Int       @default(autoincrement()) @id
  createdByUserId Int
  updatedByUserId Int?
  title           String
  description     String
  price           Float?
  startDate       DateTime
  closeDate       DateTime
  manualCloseDate DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime?

  // References ---------------------------------------------------------------------------------------
  createdByUser User                @relation("createdBy", fields: [createdByUserId], references: [id])
  updatedByUser User?               @relation("updatedBy", fields: [updatedByUserId], references: [id])
  products      ProductsOnOffers[]
  sales         SalesOnOffers[]
}


model ProductsOnOffers {
  // Fields ------------------------------------------------------
  offerId   Int
  productId Int
  quantity  Int @default(1)

  // References --------------------------------------------------
  offer   Offer   @relation(fields: [offerId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@id([offerId, productId])
}


model Sale {
  // Fields -----------------------------------------------------------------------------------------
  id              Int       @default(autoincrement()) @id
  createdByUserId Int
  updatedByUserId Int?
  manualPrice     Float?
  cashPayment     Boolean
  cardPayment     Boolean
  createdAt       DateTime  @default(now())
  updatedAt       DateTime?

  // References -------------------------------------------------------------------------------------
  createdByUser User              @relation("createdBy", fields: [createdByUserId], references: [id])
  updatedByUser User?             @relation("updatedBy", fields: [updatedByUserId], references: [id])
  products      SalesOnProducts[]
  offers        SalesOnOffers[]
}


model SalesOnProducts {
  // Fields --------------------------------------------------------
  productId Int
  saleId    Int
  quantity  Int @default(1)

  // References ----------------------------------------------------
  product   Product @relation(fields: [productId], references: [id])
  sale      Sale    @relation(fields: [saleId], references: [id])

  @@id([productId, saleId])
}


model SalesOnOffers {
  // Fields ------------------------------------------------
  saleId    Int
  offerId   Int
  quantity  Int @default(1)

  // References --------------------------------------------
  sale  Sale  @relation(fields: [saleId], references: [id])
  offer Offer @relation(fields: [offerId], references: [id])

  @@id([offerId, saleId])
}
